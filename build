#!/bin/bash
# Cubuntu Builder: Terminal 16.0.5

export PATH=.:./tools:../tools:/usr/sbin:/usr/bin:/sbin:/bin:/

CURRENTDIR=$(dirname $(readlink -f $0))
echo "Your directory was in $CURRENTDIR."
echo "Changing directory..."
cd $CURRENTDIR
CWD="$(pwd)"

. ./config || exit 1
. ./cubuntubuildlib || exit 1

# only root can continue, because only root can read all files from your system
allow_only_root

# check for mksquashfs with xz compression
if [ "$(mksquashfs 2>&1 | grep "Xdict-size")" = "" ]; then
   echo "mksquashfs not found or doesn't support -comp xz, aborting, no changes made."
   echo "You may consider installing squashfs-tools package. Use"
   echo "sudo apt install squashfs-tools"
   exit 1
fi

MKISOFS=$(which mkisofs)
if [ "$MKISOFS" = "" ]; then
   MKISOFS=$(which genisoimage)
fi
if [ "$MKISOFS" = "" ]; then
   echo "mkisofs or genisoimage not found... You can install in sudo apt."
   exit 3
fi

# build initramfs image
if [ "$SKIPINITRFS" = "" ]; then
   echo "Creating initramfs image..."
   cd initramfs
   INITRAMFS=$(./initramfs_create)
   cd ..
fi

# create live kit filesystem (cpio archive)
rm -Rf "$DISTRODATA"
BOOT="$DISTRODATA"/"$DISTRONAME"/boot
mkdir -p "$BOOT"
mkdir -p "$BOOT"/../changes
mkdir -p "$BOOT"/../modules

if [ "$INITRAMFS" != "" ]; then
   mv "$INITRAMFS" $BOOT/initrfs.img
fi

# BIOS / MBR booting
cp -r bootfiles/* $BOOT
cat bootfiles/syslinux.cfg | sed -r "s:/boot/:/$DISTRONAME/boot/:" > $BOOT/syslinux.cfg
cat bootfiles/bootinst.bat | sed -r "s:/boot/:/$DISTRONAME/boot/:" | sed -r "s:\\\\boot\\\\:\\\\$DISTRONAME\\\\boot\\\\:" > $BOOT/bootinst.bat
cp $VMLINUZ $BOOT/ || exit

# UEFI booting
mkdir -p $BOOT/EFI/Boot
cp bootfiles/EFI/Boot/syslinux.efi $BOOT/EFI/Boot/bootx64.efi
cp bootfiles/EFI/Boot/{ldlinux.e64,menu.c32,libutil.c32,vesamenu.c32,libcom32.c32} $BOOT/EFI/Boot
cat $BOOT/syslinux.cfg | sed -r "s:/$DISTRONAME/boot/vesamenu:vesamenu:" > $BOOT/EFI/Boot/syslinux.cfg

# create compressed 01-core.sb
COREFS=""
for i in $MKMOD; do
   if [ -d /$i ]; then
      COREFS="$COREFS /$i"
   fi
done
if [ "$SKIPCOREMOD" = "" ]; then
   mksquashfs $COREFS $DISTRODATA/$DISTRONAME/01-core.$BEXT -comp xz -b 1024K -Xbcj x86 -always-use-fragments -keep-as-directory || exit
fi

cd "$DISTRODATA"
TARGET=/tmp

cat "$CWD/bootinfo.txt" | fgrep -v "#" | sed -r "s/linuxseed/$DISTRONAME/" | sed -r "s/\$/\x0D/" > readme.txt

echo cd $LIVEKITDATA '&&' $MKISOFS -o "$TARGET/$DISTRONAME-$VERSION-$EDITION-$ARCH.iso" -v -J -R -D -A "$DISTRONAME" -V "$DISTRONAME" \
-no-emul-boot -boot-info-table -boot-load-size 4 \
-b "$DISTRONAME"/boot/isolinux.bin -c "$DISTRONAME"/boot/isolinux.boot . \
> $TARGET/gen_"$DISTRONAME"_iso.sh
chmod o+x $TARGET/gen_"$DISTRONAME"_iso.sh

echo cd $DISTRODATA '&&' zip -0 -r "$TARGET/$DISTRONAME-$ARCH.zip" '*' \
> $TARGET/gen_"$DISTRONAME"_zip.sh
chmod o+x $TARGET/gen_"$DISTRONAME"_zip.sh

echo "Your Linux distribution is done."
echo "You can send ISO to SourceForge, Internet Archive, etc."
echo "To generate as ISO, run: $TARGET/gen_"$DISTRONAME"_iso.sh"
echo "To generate as ZIP, run: $TARGET/gen_"$DISTRONAME"_zip.sh"
echo "Enjoying Cubuntu Builder?"
echo "5 will you rate, use ./rate5."
cd $CWD
